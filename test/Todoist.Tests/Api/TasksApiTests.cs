using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Todoist.Client;
using Todoist.Api;
// uncomment below to import models
//using Todoist.Model;

namespace Todoist.Test.Api
{
    /// <summary>
    ///  Class for testing TasksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TasksApiTests : IDisposable
    {
        private TasksApi instance;

        public TasksApiTests()
        {
            instance = new TasksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TasksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TasksApi
            //Assert.IsType<TasksApi>(instance);
        }

        /// <summary>
        /// Test CloseTask
        /// </summary>
        [Fact]
        public void CloseTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long taskId = null;
            //string xRequestId = null;
            //instance.CloseTask(taskId, xRequestId);
        }

        /// <summary>
        /// Test CreateTask
        /// </summary>
        [Fact]
        public void CreateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xRequestId = null;
            //NewTask newTask = null;
            //var response = instance.CreateTask(xRequestId, newTask);
            //Assert.IsType<Task>(response);
        }

        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Fact]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long taskId = null;
            //instance.DeleteTask(taskId);
        }

        /// <summary>
        /// Test GetTask
        /// </summary>
        [Fact]
        public void GetTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long taskId = null;
            //var response = instance.GetTask(taskId);
            //Assert.IsType<Task>(response);
        }

        /// <summary>
        /// Test GetTasks
        /// </summary>
        [Fact]
        public void GetTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? projectId = null;
            //int? sectionId = null;
            //long? labelId = null;
            //string filter = null;
            //string lang = null;
            //List<long> ids = null;
            //var response = instance.GetTasks(projectId, sectionId, labelId, filter, lang, ids);
            //Assert.IsType<List<Task>>(response);
        }

        /// <summary>
        /// Test ReopenTask
        /// </summary>
        [Fact]
        public void ReopenTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long taskId = null;
            //string xRequestId = null;
            //instance.ReopenTask(taskId, xRequestId);
        }

        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Fact]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long taskId = null;
            //string xRequestId = null;
            //TaskUpdate taskUpdate = null;
            //instance.UpdateTask(taskId, xRequestId, taskUpdate);
        }
    }
}
